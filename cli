#!/usr/bin/env ruby

# use this script with this command : $ ./cli

require "thor"

class CLI < Thor
  include Thor::Actions

  # Monkey patch for first screen customization
  # inspiration : https://stackoverflow.com/a/45730659/3219759
  class << self
    def help(shell, subcommand = false)
      list = printable_commands(true, subcommand)
      Thor::Util.thor_classes_in(self).each do |klass|
        list += klass.printable_commands(false)
      end

      # Remove this line to disable alphabetical sorting
      # list.sort! { |a, b| a[0] <=> b[0] }

      # Add this line to remove the help-command itself from the output
      list.reject! { |l| l[0].split[1] == "help" }

      shell.say "Commands:"
      shell.say

      staging_commands = list.select { |a| a[0].include? "staging" }
      production_commands = list.select { |a| a[0].include? "prod" }
      pages_commands = list.select { |a| a[0].include? "new_page" }

      shell.say "Staging"
      shell.print_table(staging_commands, indent: 2, truncate: true)
      shell.say

      shell.say "Production"
      shell.print_table(production_commands, indent: 2, truncate: true)
      shell.say

      shell.say "Page creation"
      shell.print_table(pages_commands, indent: 2, truncate: true)
      shell.say
    end
  end

  desc "deploy_staging", "deploy staging from develop"
  def deploy_staging
    run("git push scalingo develop:master")
    run("scalingo -a mon-suivi-justice-public-staging run rails db:migrate")

    say
    say "Staging deployed"
    say
  end

  desc "console_staging", "launch MSJ staging rails console"
  def console_staging
    run("scalingo -a mon-suivi-justice-public-staging run rails console")
  end

  desc "bash_staging", "launch bash on MSJ staging"
  def bash_staging
    run("scalingo -a mon-suivi-justice-public-staging run bash")
  end

  desc "logs_staging", "streams MSJ staging logs"
  def logs_staging
    run("scalingo -a mon-suivi-justice-public-staging logs -f")
  end

  desc "migrations_staging", "launch migrations on MSJ staging"
  def migrations_staging
    run("scalingo -a mon-suivi-justice-public-staging run rails db:migrate")
  end

  desc "deploy_prod", "launch bin/deploy-prod script"
  def deploy_prod
    run("bin/deploy-prod")
  end

  desc "console_prod", "launch MSJ production rails console"
  def console_prod
    run("scalingo -a mon-suivi-justice-public-prod --region osc-secnum-fr1 run rails console")
  end

  desc "bash_prod", "launch bash on MSJ prod"
  def bash_prod
    run("scalingo -a mon-suivi-justice-public-prod --region osc-secnum-fr1 run bash")
  end

  desc "logs_prod", "streams MSJ production logs"
  def logs_prod
    run("scalingo -a mon-suivi-justice-public-prod --region osc-secnum-fr1 logs -f")
  end

  desc "migrations_prod", "launch migrations on MSJ production"
  def migrations_prod
    run("scalingo -a mon-suivi-justice-public-prod --region osc-secnum-fr1 run rails db:migrate")
  end

  desc "new_page_investir", "creates new page Investir ma réinsertion"
  def new_page_investir
    name = ask("What is the name of the new page ? (ex: ma_reinsertion_aisne)")
    say

    run("rails generate investir_page #{name}")

    say
    say "New page created"
    say

    diff = ask("Do you want to see a git diff before deploying ? (y/n)?")

    run("git --no-pager diff") if diff == 'y'
    say

    deploy = ask("Do you want to commit and deploy ? (y/n)")
    say
    if deploy == 'n'
      run("rails destroy investir_page #{name}")
      return
    end

    run("git add .")
    run("git commit -m 'add new page #{name}'")
    run("git push")

    run("bin/deploy-prod")
    run("scalingo -a mon-suivi-justice-public-prod --region osc-secnum-fr1 run rake spina:bootstrap")

    say
    say set_color "* * * New page deployed * * *", :green
    say
  end

  desc "new_page_preparer", "creates new page Préparer mon rdv"
  def new_page_preparer
    name = ask("What's the name of the new page ? (ex: preparer_sap_agen)")
    say

    department = ask("Which department is concerned ? (ex: 93)")
    say

    image_name = ask("What's the name of the image previously saved in app/frontend/images ? (ex: spip93.jpg)")
    say

    run("rails generate preparer_page #{name} --image_name=#{image_name} --department=#{department}")

    say
    say "New page created"
    say

    diff = ask("Do you want to see a git diff before deploying ? (y/n)?")

    run("git --no-pager diff") if diff == 'y'
    say

    deploy = ask("Do you want to commit and deploy ? (y/n)")
    say
    if deploy == 'n'
      run("rails destroy preparer_page #{name} --image_name=#{image_name} --department=#{department}")
      say

      say "This generator is not fully reversible, there are changes to config/initializers/themes/default.rb that needs to be reverted manually."
      return
    end

    run("git add .")
    run("git commit -m 'add new page #{name}'")
    run("git push")

    run("bin/deploy-prod")
    run("scalingo -a mon-suivi-justice-public-prod --region osc-secnum-fr1 run rake spina:bootstrap")

    say
    say set_color "* * * New page deployed * * *", :green
    say
  end
end

CLI.start(ARGV)
